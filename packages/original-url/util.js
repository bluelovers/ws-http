"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIPv6 = exports.parsePartialURL = exports.getFirstHeader = void 0;
const url_1 = require("url");
const ip_regex_1 = require("ip-regex");
const re_v6 = ip_regex_1.v6({ exact: true });
/**
 * In case there's more than one header of a given name, we want the first one
 * as it should be the one that was added by the first proxy in the chain
 */
function getFirstHeader(req, header) {
    const value = req.headers[header];
    return (Array.isArray(value) ? value[0] : value).split(', ')[0];
}
exports.getFirstHeader = getFirstHeader;
function parsePartialURL(url) {
    const containsProtocol = url.indexOf('://') !== -1;
    const result = url_1.parse(containsProtocol ? url : 'invalid://' + url);
    if (!containsProtocol)
        result.protocol = '';
    return result;
}
exports.parsePartialURL = parsePartialURL;
function isIPv6(ip) {
    return re_v6.test(ip);
}
exports.isIPv6 = isIPv6;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQXdDO0FBQ3hDLHVDQUE4QjtBQUU5QixNQUFNLEtBQUssR0FBRyxhQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUVsQzs7O0dBR0c7QUFDSCxTQUFnQixjQUFjLENBQUMsR0FFOUIsRUFBRSxNQUFjO0lBRWhCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDakMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hFLENBQUM7QUFORCx3Q0FNQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxHQUFXO0lBRTFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUNsRCxNQUFNLE1BQU0sR0FBRyxXQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0I7UUFBRSxNQUFNLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQTtJQUMzQyxPQUFPLE1BQU0sQ0FBQTtBQUNkLENBQUM7QUFORCwwQ0FNQztBQUVELFNBQWdCLE1BQU0sQ0FBQyxFQUFVO0lBRWhDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN0QixDQUFDO0FBSEQsd0JBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSBhcyBwYXJzZVVybCB9IGZyb20gXCJ1cmxcIjtcbmltcG9ydCB7IHY2IH0gZnJvbSAnaXAtcmVnZXgnO1xuXG5jb25zdCByZV92NiA9IHY2KHsgZXhhY3Q6IHRydWUgfSk7XG5cbi8qKlxuICogSW4gY2FzZSB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgaGVhZGVyIG9mIGEgZ2l2ZW4gbmFtZSwgd2Ugd2FudCB0aGUgZmlyc3Qgb25lXG4gKiBhcyBpdCBzaG91bGQgYmUgdGhlIG9uZSB0aGF0IHdhcyBhZGRlZCBieSB0aGUgZmlyc3QgcHJveHkgaW4gdGhlIGNoYWluXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXJzdEhlYWRlcihyZXE6IHtcblx0aGVhZGVyczogUmVjb3JkPGFueSwgYW55PlxufSwgaGVhZGVyOiBzdHJpbmcpOiBzdHJpbmdcbntcblx0Y29uc3QgdmFsdWUgPSByZXEuaGVhZGVyc1toZWFkZXJdXG5cdHJldHVybiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVswXSA6IHZhbHVlKS5zcGxpdCgnLCAnKVswXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXJ0aWFsVVJMKHVybDogc3RyaW5nKVxue1xuXHRjb25zdCBjb250YWluc1Byb3RvY29sID0gdXJsLmluZGV4T2YoJzovLycpICE9PSAtMVxuXHRjb25zdCByZXN1bHQgPSBwYXJzZVVybChjb250YWluc1Byb3RvY29sID8gdXJsIDogJ2ludmFsaWQ6Ly8nICsgdXJsKVxuXHRpZiAoIWNvbnRhaW5zUHJvdG9jb2wpIHJlc3VsdC5wcm90b2NvbCA9ICcnXG5cdHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSVB2NihpcDogc3RyaW5nKVxue1xuXHRyZXR1cm4gcmVfdjYudGVzdChpcClcbn1cbiJdfQ==